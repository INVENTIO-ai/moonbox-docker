version: 2.1

commands:
  preparation-steps:
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "d0:58:f4:95:5a:be:d2:06:c0:29:97:9c:c8:e9:96:8f"
      - run: echo $KNOWN_HOST > ~/.ssh/known_hosts
      - attach_workspace:
          at: /home/circleci
      - setup_remote_docker

  run-with-shell:
    parameters:
      run-name:
        type: string
      command:
        type: string
      shell:
        type: string
        default: /usr/bin/env sh
    steps:
      - run:
          name: << parameters.run-name >>
          command: |
            script_file=`mktemp -t scriptfile_XXXXXXXX`
            echo "set -x CIRCLE_SHA1 $CIRCLE_SHA1" >> $script_file
            echo "set -x CIRCLE_BRANCH $CIRCLE_BRANCH" >> $script_file
            cat \<< 'EOF' >> $script_file
            << parameters.command >>
            EOF
            << parameters.shell >> < $script_file
          no_output_timeout: 1200

  build-docker-image:
    description: Build a vid-vision docker image
    parameters:
      imagename:
        type: string
      additionaltag:
        type: string
        default: ""
      tagversion:
        type: string
        default: (git rev-parse --short=8 HEAD)
      path:
        type: string
        default: .
      dockerfile:
        type: string
        default: "docker/Dockerfile"
      baseimage:
        type: string
      additional_buildargs:
        type: string
        default: ''
      shell:
        type: string
        default: /usr/bin/env fish
      docker_exe:
        type: string
        default: docker
    steps:
      - run: apk add fish tar python3 py3-yaml jq
      - run-with-shell:
          run-name: Build image << parameters.imagename >>
          shell: << parameters.shell >>
          command: |
            if not git remote get-url origin
              set CI_WORKING_DIRECTORY (mktemp -d -t docker-build.XXXXXXXX)
              cd $CI_WORKING_DIRECTORY
              git clone https://github.com/MoonVision/moonbox-docker.git
              cd moonbox-docker
              git checkout $CIRCLE_SHA1
            end

            set docker_tag ""

            if test "<< parameters.additionaltag >>"
              set docker_tag "<< parameters.additionaltag >>"
            end

            if test "<< parameters.tagversion >>"
              if test "$docker_tag"
                set docker_tag_latest "$docker_tag-latest"
                set docker_tag $docker_tag-<< parameters.tagversion >>
              else
                set docker_tag_latest "latest"
                set docker_tag << parameters.tagversion >>
              end
            end

            set baseimage_param ""

            set additional_buildargs

            if test "<< parameters.additional_buildargs >>"
              alias yaml2json "python3 -c 'import yaml,json,sys; sys.stdout.write(json.dumps(yaml.load(sys.stdin), sort_keys=True, indent=2))'"
              alias object2buildargs 'jq --raw-output \'to_entries | map("--build-arg", "\(.key)=\(.value)") | join("\n")\''
              set additional_buildargs (echo "<< parameters.additional_buildargs >>" | yaml2json | object2buildargs)
            end

            if test "<< parameters.baseimage >>"
              set baseimage_param --build-arg baseimage="<< parameters.baseimage >>"
            end

            << parameters.docker_exe >> build --pull -f "<< parameters.dockerfile >>" -t << parameters.imagename >>:$docker_tag -t << parameters.imagename >>:$docker_tag_latest $baseimage_param $additional_buildargs "<< parameters.path >>"
            echo Build finished

            if test "$CI_WORKING_DIRECTORY"
              rm -rf $CI_WORKING_DIRECTORY
            end

            << parameters.docker_exe >> images

            echo "$DOCKER_PASSWORD" | << parameters.docker_exe >> login -u $DOCKER_USER --password-stdin

            << parameters.docker_exe >> push << parameters.imagename >>:$docker_tag
            << parameters.docker_exe >> push << parameters.imagename >>:$docker_tag_latest

jobs:
  docker-common-base:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/common-base
          path: docker/common-base/image
          dockerfile: docker/common-base/image/Dockerfile
          baseimage: ubuntu:20.04
          additional_buildargs: |
            disable_ssh: true
            disable_cron: true

  docker-common-base-cuda:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/common-base
          additionaltag: cuda
          path: docker/common-base/image
          dockerfile: docker/common-base/image/Dockerfile
          baseimage: nvidia/cuda:10.0-devel-ubuntu18.04
          additional_buildargs: |
            disable_ssh: true
            disable_cron: true
          shell: $REMOTE_SHELL

  docker-python-base:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/python-base
          path: docker/python-base
          dockerfile: docker/python-base/Dockerfile
          baseimage: moonvision/common-base:latest

  docker-python-base-cuda:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/python-base
          additionaltag: cuda
          path: docker/python-base
          dockerfile: docker/python-base/Dockerfile
          baseimage: moonvision/common-base:cuda-latest
          shell: $REMOTE_SHELL

  build-ffmpeg:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: ffmpeg
          tagversion: 4.2.1
          path: docker/builders/ffmpeg
          dockerfile: docker/builders/ffmpeg/Dockerfile
          baseimage: ubuntu:20.04
          additional_buildargs: |
            ffmpeg_version: 4.2.1

  build-ffmpeg-cuda:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: ffmpeg-cuda
          tagversion: 4.2.1
          baseimage: moonvision/python-base:cuda-latest
          path: docker/builders/ffmpeg
          dockerfile: docker/builders/ffmpeg/Dockerfile
          additional_buildargs: |
            ffmpeg_version: 4.2.1
            with_cuda: true
          shell: $REMOTE_SHELL

  build-proxychains:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: proxychains
          tagversion: "4.14"
          path: docker/builders/proxychains
          dockerfile: docker/builders/proxychains/Dockerfile
          baseimage: ubuntu:20.04
          additional_buildargs: |
            proxychains_version: 4.14

  build-opensc:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: opensc
          tagversion: "0.20.0"
          path: docker/builders/opensc
          dockerfile: docker/builders/opensc/Dockerfile
          baseimage: ubuntu:20.04
          additional_buildargs: |
            opensc_version: 0.20.0

  build-pytorch:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: pytorch
          tagversion: 1.5.0_torchvision-0.6.0
          baseimage: moonvision/python-base
          path: docker/builders/pytorch
          dockerfile: docker/builders/pytorch/Dockerfile
          additional_buildargs: |
            pytorch_tag: v1.5.0
            torchvision_tag: v0.6.0

  build-pytorch-cuda:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: pytorch-cuda
          tagversion: 1.5.0_torchvision-0.6.0
          baseimage: moonvision/python-base:cuda-latest
          path: docker/builders/pytorch
          dockerfile: docker/builders/pytorch/Dockerfile
          additional_buildargs: |
            pytorch_tag: v1.5.0
            torchvision_tag: v0.6.0
            torchvision_cuda: 1
          shell: $REMOTE_SHELL

  build-cmake:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/custom-builds
          additionaltag: cmake
          tagversion: 3.15.5
          path: docker/builders/cmake
          dockerfile: docker/builders/cmake/Dockerfile
          baseimage: ubuntu:20.04
          additional_buildargs: |
            cmake_tag: v3.15.5

  docker-moonbox-mini:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/moonbox
          additionaltag: mini
          path: docker/moonbox
          dockerfile: docker/moonbox/Dockerfile
          baseimage: moonvision/python-base:latest
          additional_buildargs: |
            ffmpeg_from_docker: moonvision/custom-builds:ffmpeg-4.2.1
            pytorch_from_docker: moonvision/custom-builds:pytorch-1.5.0_torchvision-0.6.0

  docker-moonbox-genicam:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/moonbox
          additionaltag: genicam
          path: docker/moonbox
          dockerfile: docker/moonbox/Dockerfile
          baseimage: moonvision/python-base:latest
          additional_buildargs: |
            with_genicam: true
            ffmpeg_from_docker: moonvision/custom-builds:ffmpeg-4.2.1
            pytorch_from_docker: moonvision/custom-builds:pytorch-1.5.0_torchvision-0.6.0

  docker-moonbox-basler:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/moonbox
          additionaltag: basler
          path: docker/moonbox
          dockerfile: docker/moonbox/Dockerfile
          baseimage: moonvision/python-base:latest
          additional_buildargs: |
            with_genicam: true
            with_pylon: true
            ffmpeg_from_docker: moonvision/custom-builds:ffmpeg-4.2.1
            pytorch_from_docker: moonvision/custom-builds:pytorch-1.5.0_torchvision-0.6.0

  docker-moonbox-cuda:
    docker:
      - image: docker:git
    steps:
      - preparation-steps
      - build-docker-image:
          imagename: moonvision/moonbox
          additionaltag: cuda
          path: docker/moonbox
          dockerfile: docker/moonbox/Dockerfile
          baseimage: moonvision/python-base:cuda-latest
          additional_buildargs: |
            with_genicam: true
            with_pylon: true
            with_cuda: true
            ffmpeg_from_docker: moonvision/custom-builds:ffmpeg-cuda-4.2.1
            pytorch_from_docker: moonvision/custom-builds:pytorch-cuda-1.5.0_torchvision-0.6.0
          shell: $REMOTE_SHELL

workflows:
  version: 2
  build:
    when:
      equal: [ master, << pipeline.git.branch >> ]
    jobs: &full-workflow
      - docker-common-base
      - docker-common-base-cuda
      - docker-python-base:
          requires:
            - docker-common-base
      - docker-python-base-cuda:
          requires:
            - docker-common-base-cuda
      - build-ffmpeg
      - build-cmake
      - build-opensc
      - build-proxychains
      - build-ffmpeg-cuda:
          requires:
            - docker-python-base-cuda
      - build-pytorch:
          requires:
            - docker-python-base
            - build-cmake
      - build-pytorch-cuda:
          requires:
            - docker-python-base-cuda
            - build-cmake
      - docker-moonbox-mini:
          requires:
            - docker-python-base
            - build-ffmpeg
            - build-pytorch
      - docker-moonbox-genicam:
          requires:
            - docker-python-base
            - build-ffmpeg
            - build-pytorch
      - docker-moonbox-basler:
          requires:
            - docker-python-base
            - build-ffmpeg
            - build-pytorch
      - docker-moonbox-cuda:
          requires:
            - docker-python-base-cuda
            - build-ffmpeg-cuda
            - build-pytorch-cuda

  nightly-build:
    triggers:
      - schedule:
          cron: "0 23 * * *"
          filters:
            branches:
              only:
                - master
    jobs: *full-workflow
